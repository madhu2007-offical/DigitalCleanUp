# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Ff85d1BBH11VIP7hYvszkhmPvzMK4Uq
"""

!pip install streamlit pyngrok --quiet

from pyngrok import ngrok
ngrok.set_auth_token("31Xstut6hTFkuAVpFukCIcjAQxC_54ME5KXNSWjR4XRS9uaW8")

app_code = '''
import os
import zipfile
import hashlib
import streamlit as st

# ---------------------------
# Helper Functions
# ---------------------------

def create_demo_files(folder):
    os.makedirs(folder, exist_ok=True)
    files_content = {
        "resume_old.docx": "This is my resume - old version.",
        "resume_old_copy.docx": "This is my resume - old version.",  # duplicate
        "notes.txt": "",  # empty file
        "image1.jpg": "FAKEIMAGECONTENT12345",  # simulate image
        "image1_copy.jpg": "FAKEIMAGECONTENT12345",  # duplicate image
        "project_draft.pptx": "Presentation draft data " * 1000  # big file
    }
    for filename, content in files_content.items():
        with open(os.path.join(folder, filename), "w") as f:
            f.write(content)
    return list(files_content.keys())

def scan_files(folder):
    report = {"duplicates": [], "empty": [], "large": []}
    hashes = {}
    for root, _, files in os.walk(folder):
        for file in files:
            path = os.path.join(root, file)
            try:
                size = os.path.getsize(path)
                if size == 0:
                    report["empty"].append(file)
                elif size > 5000:  # arbitrary threshold
                    report["large"].append(file)

                with open(path, "rb") as f:
                    content = f.read()
                    h = hashlib.md5(content).hexdigest()
                    if h in hashes:
                        report["duplicates"].append(file)
                    else:
                        hashes[h] = file
            except:
                pass
    return report

def calculate_score(report):
    waste_items = len(report["duplicates"]) + len(report["empty"]) + len(report["large"])
    score = max(0, 100 - waste_items * 10)
    co2 = waste_items * 0.2  # dummy CO2 estimate
    return score, co2

# ---------------------------
# Streamlit UI
# ---------------------------

st.set_page_config(page_title="Digital Cleanup Prototype", layout="centered")

st.title("Digital Cleanup – Save Storage, Save Planet")
st.markdown(
    """
    Welcome to the **Digital Cleanup Tool**.
    This prototype scans files, detects digital waste,
    and shows your **Digital Waste Score** along with the **estimated CO₂ impact**.
    """
)

st.divider()

# Auto-generate demo files
demo_folder = "demo_files"
demo_files = create_demo_files(demo_folder)

# Upload option
st.header("1. File Upload or Demo Mode")
uploaded = st.file_uploader("Upload a ZIP of your files (optional)", type=["zip"])

if uploaded:
    with zipfile.ZipFile(uploaded, "r") as zip_ref:
        zip_ref.extractall("uploaded_files")
    folder_to_scan = "uploaded_files"
    st.success("Files uploaded and ready for scanning.")
else:
    folder_to_scan = demo_folder
    st.info("Using demo files for testing: " + ", ".join(demo_files))

st.divider()

# Scan button
st.header("2. Scan for Digital Waste")
if st.button("Start Scan"):
    report = scan_files(folder_to_scan)
    score, co2 = calculate_score(report)

    st.subheader("Scan Report")
    st.write("**Duplicates found:**", report["duplicates"] if report["duplicates"] else "None")
    st.write("**Empty files found:**", report["empty"] if report["empty"] else "None")
    st.write("**Large files found:**", report["large"] if report["large"] else "None")

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Digital Waste Score", f"{score}/100")
    with col2:
        st.metric("Estimated CO₂ Impact", f"{co2:.2f} kg")

    if st.button("Clean Now"):
        st.success("Digital cleanup completed (simulation). Storage saved & CO₂ reduced!")

st.divider()

# Cloud Scan Simulation
st.header("3. Cloud Storage Simulation")
if st.checkbox("Run Cloud Scan (Simulated)"):
    st.write("Scanning Google Drive / iCloud / Dropbox (simulation only)...")
    st.write("Found: 250 MB junk, 40 duplicates, 15 spam PDFs.")
    st.metric("Estimated Cloud CO₂ Impact", "3.5 kg")
'''

with open("app.py", "w") as f:
    f.write(app_code)

ngrok.kill()  # close old sessions
public_url = ngrok.connect(8501)
print("App running at:", public_url)
!streamlit run app.py --server.port 8501 &>/dev/null&